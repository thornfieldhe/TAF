<%-- 
Name:
Author: 
Description: 
--%>
<%@ Template Language="C#" TargetLanguage="c#"  Debug="True" %>
<%@ Property Name="SourceTable" Type="SchemaExplorer.TableSchema" Category="基本信息" Description="Table that the object is based on." %>
<%@ Property Name="ClassNamespace" Type="System.String" Category="基本信息" Default="TAF.Web" Description="" %>
<%@ Property Name="Description" Type="System.String" Category="基本信息" Default="商品" Description="" %>
<%@ Assembly Name="System.ComponentModel"  %>
<%@ Assembly Name="SchemaExplorer" %>
<%@ Assembly Name="TAF.Utility"  Path="d:\WorkStation\TAF\TAF.Utility\bin\Release"%>
<%@ Assembly Name="TAF.Business"  Path="d:\WorkStation\TAF\TAF.Business\bin\Release"%>
<%@ Assembly Name="TAF.Web"  Path="d:\WorkStation\TAF\TAF.Web\bin"%>
<%@ Assembly Src="Common.cs" %>
<%@ Import Namespace="TAF.Utility" %>  
<%@ Import Namespace="TAF" %>  
<%@ Import Namespace="SchemaExplorer" %>
<%@ Import Namespace="SchemaMapper" %>
<%@ Import Namespace="System" %> 
<%@ Import Namespace="System.Linq" %> 
<%@ Import Namespace="System.Reflection" %> 
<%@ Import Namespace="System.Collections.Generic" %>
<%@ Import Namespace="TAF.Utility" %>
<%@ Import Namespace="System.IO" %>
<%@ Map Name="SqlCSharp" Src="Sql-CSharp" Description="System to C# Type Map" %>
<%@ Map Name="DbDataReader" Src="DbType-DataReaderMethod" Description="DbType to DataReader Method Map" %>
<%@ Map Name="SqlNativeSqlDb" Src="SqlNativeType-SqlDbType" Description="SqlNativeType to SqlDbType Map" %>
<%@ Map Name="DbTypeCSharp" Src="DbType-CSharp" Description="DbType to CSharp Map" %>
<%@ Register Name="ModelCs" Template="Model.cs.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%@ Register Name="ModelJs" Template="model.js.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%@ Register Name="Others" Template="Others.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%@ Register Name="Index" Template="_Index.cshtml.cst" MergeProperties="Flase" ExcludeProperties=""%>
<%@ Register Name="ViewModel" Template="ViewModels.cs.cst" MergeProperties="Flase" ExcludeProperties=""%>
<% GenerateEntityClasses(); %>


<script runat="template">
//生成实体Entity类
private void GenerateEntityClasses()
{
    RenderModelCsFile();
    RenderModelJsFile();
    RenderViewModelFile();
    RenderIndexFile();
    RenderOthersFile();
}

private void RenderModelCsFile()
{
    var item=new ModelCs();
    item.ClassNamespace=ClassNamespace;
    item.Description=Description;
    item.SourceTable=SourceTable;
    var fileDirectory=OutputDirectory +"\\Web\\Models\\CodeSmith\\"+ Common.GetClassName(item.SourceTable) +".cs";
    item.RenderToFile(fileDirectory,true);
}

private void RenderModelJsFile()
{
    var item=new ModelJs();
    item.ClassNamespace=ClassNamespace;
    item.Description=Description;
    item.SourceTable=SourceTable;
    var fileDirectory=OutputDirectory +"\\Web\\Scripts\\"+Extensions.ToCamel(Common.GetClassName(item.SourceTable))  +".js";
    item.RenderToFile(fileDirectory,true);
}

private void RenderViewModelFile()
{
    var item=new ViewModel();
    item.ClassNamespace=ClassNamespace;
    item.Description=Description;
    item.SourceTable=SourceTable;
    var fileDirectory=OutputDirectory +"\\Web\\ViewModels\\"+Common.GetClassName(item.SourceTable)  +"View.cs";
    item.RenderToFile(fileDirectory,true);
}

private void RenderIndexFile()
{
    var item=new Index();
    item.ClassNamespace=ClassNamespace;
    item.Description=Description;
    item.SourceTable=SourceTable;
    var fileDirectory=OutputDirectory +"\\Web\\Views\\"+Common.GetClassName(item.SourceTable)+"\\_Index.cshtml";
    item.RenderToFile(fileDirectory,true);
}

private void RenderOthersFile()
{
    var item=new Others();
    item.ClassNamespace=ClassNamespace;
    item.Description=Description;
    item.SourceTable=SourceTable;
    var fileDirectory=OutputDirectory +"\\Web\\Others.txt";
    item.RenderToFile(fileDirectory,true);
}

private string Directory = String.Empty;
[Editor(typeof(System.Windows.Forms.Design.FolderNameEditor), typeof(System.Drawing.Design.UITypeEditor))] 
[Optional, NotChecked]
[DefaultValue("")]
public string OutputDirectory 
{ 
    get
    {
        return Directory;
    }
    set
    {
        if (value.EndsWith("\\")) value = value.Substring(0, value.Length -1);
        Directory = value;
    } 
}
</script>





